let {
  intrinsic,
  iterable_iterator,
  iterator_next,
} = import "_internal";
let ops = import "std/ops";

pub let Iterable = {
  iterator: iterable_iterator,
};

pub let Iterator = {
  next: iterator_next,
};

pub let Null = {
  prototype: {
  }
};

let int_range = fn (from, to, inclusive) => {
  from,
  to,
  inclusive,
  [Iterable.iterator]: fn (self) => {
    to: self.to,
    inclusive: self.inclusive,
    cur: self.from,
    [Iterator.next]: fn (self) => do {
      let in_range = if self.inclusive {
        self.cur <= self.to
      } else {
        self.cur < self.to
      };
      if in_range {
        let cur = self.cur;
        self.cur = self.cur + 1;
        [cur]
      } else {
        []
      }
    }
  }
};

pub let Int = {
  prototype: {
    [ops.op_plus]: intrinsic("int_add"),
    [ops.op_minus]: intrinsic("int_sub"),
    [ops.op_mul]: intrinsic("int_mul"),
    [ops.op_mod]: intrinsic("int_mod"),
    [ops.op_gt]: intrinsic("int_gt"),
    [ops.op_ge]: intrinsic("int_ge"),
    [ops.op_lt]: intrinsic("int_lt"),
    [ops.op_le]: intrinsic("int_le"),
    [ops.op_negate]: intrinsic("int_negate"),
    [ops.op_range]: fn (lhs, rhs) => int_range(lhs, rhs, false),
    [ops.op_range_eq]: fn (lhs, rhs) => int_range(lhs, rhs, true),
  }
};

pub let Bool = {
  prototype: {
    [ops.op_not]: fn (self) => if self { false } else { true },
  }
};

pub let String = {
  prototype: {
    [ops.op_plus]: intrinsic("string_append"),
  }
};

pub let Symbol = {
  prototype: {}
};

pub let Function = {
  prototype: {}
};

pub let Array = {
  prototype: {
    len: intrinsic("array_len"),
    push: intrinsic("array_push"),
    [Iterable.iterator]: fn (self) => {
      self,
      index: 0,
      [Iterator.next]: fn (self) => do {
        if self.index < self.self.len() {
          let x = self.self[self.index];
          self.index = self.index + 1;
          [x]
        } else {
          []
        }
      }
    },
  }
};
